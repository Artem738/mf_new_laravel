<?php
            
            
            return [
                ['question' => 'Переменная', 'answer' => 'var myVariable;', 'weight' => 0],
                ['question' => 'Константа', 'answer' => 'const myConst\n = 42;', 'weight' => 0],
                ['question' => 'Тип данных', 'answer' => 'int, double,\n String, bool', 'weight' => 0],
                ['question' => 'Список', 'answer' => 'List<int> numbers\n = [1, 2, 3];', 'weight' => 0],
                ['question' => 'Карта', 'answer' => 'Map<String, int>\n myMap = {\'one\': 1};', 'weight' => 0],
                ['question' => 'Цикл for', 'answer' => 'for (var i = 0;\n i < 5; i++) {}', 'weight' => 0],
                ['question' => 'Цикл while', 'answer' => 'while (condition)\n {}', 'weight' => 0],
                ['question' => 'Функция', 'answer' => 'void myFunction()\n {}', 'weight' => 0],
                ['question' => 'Анонимная функция', 'answer' => '(int x) =>\n x * 2;', 'weight' => 0],
                ['question' => 'Класс', 'answer' => 'class MyClass\n {}', 'weight' => 0],
                ['question' => 'Конструктор', 'answer' => 'MyClass(this.value);', 'weight' => 0],
                ['question' => 'Наследование', 'answer' => 'class Child extends\n Parent {}', 'weight' => 0],
                ['question' => 'Полиморфизм', 'answer' => 'Parent obj =\n Child();', 'weight' => 0],
                ['question' => 'Интерфейс', 'answer' => 'abstract class\n MyInterface {}', 'weight' => 0],
                ['question' => 'Миксин', 'answer' => 'mixin MyMixin\n {}', 'weight' => 0],
                ['question' => 'Асинхронность', 'answer' => 'Future<void>\n fetchData() async {}', 'weight' => 0],
                ['question' => 'Await', 'answer' => 'await\n fetchData();', 'weight' => 0],
                ['question' => 'Замыкание', 'answer' => 'Function add(int x)\n => (int y) => x + y;', 'weight' => 0],
                ['question' => 'Конечный автомат', 'answer' => 'switch (state)\n { case ... }', 'weight' => 0],
                ['question' => 'Провайдер', 'answer' => 'ChangeNotifierProvider(create:\n (_) => MyModel());', 'weight' => 0],
                ['question' => 'Навигация', 'answer' => 'Navigator.push(context,\n route);', 'weight' => 0],
                ['question' => 'Стейт', 'answer' => 'class MyStatefulWidgetState\n extends State<MyWidget> {}', 'weight' => 0],
                ['question' => 'Билд метод', 'answer' => 'Widget build(BuildContext\n context) {}', 'weight' => 0],
                ['question' => 'Контейнер', 'answer' => 'Container(width: 100,\n height: 100);', 'weight' => 0],
                ['question' => 'Стек', 'answer' => 'Stack(children:\n [Widget1(), Widget2()]);', 'weight' => 0],
                ['question' => 'Стрим', 'answer' => 'Stream<int> myStream\n = Stream.value(1);', 'weight' => 0],
                ['question' => 'Асинхронный генератор', 'answer' => 'Stream<int> async*\n myGenerator() {}', 'weight' => 0],
                ['question' => 'Фьючи', 'answer' => 'Future<int> futureValue\n = Future.value(10);', 'weight' => 0],
                ['question' => 'Контекст сборки', 'answer' => 'final context =\n this.context;', 'weight' => 0],
                ['question' => 'Инициализация состояния', 'answer' => '@override void\n initState() {}', 'weight' => 0],
                ['question' => 'Завершение состояния', 'answer' => '@override void\n dispose() {}', 'weight' => 0],
                ['question' => 'Текстовый виджет', 'answer' => 'Text(\'Hello\n World\');', 'weight' => 0],
                ['question' => 'Кнопка', 'answer' => 'ElevatedButton(onPressed:\n () {}, child: Text(\'Press\'));', 'weight' => 0],
                ['question' => 'Диалог', 'answer' => 'showDialog(context:\n context, builder: (_) =>\n AlertDialog());', 'weight' => 0],
                ['question' => 'Локализация', 'answer' => 'MaterialApp(localizationsDelegates:\n ...);', 'weight' => 0],
                ['question' => 'Анимация', 'answer' => 'AnimationController(vsync:\n this, duration:\n Duration(seconds: 1));', 'weight' => 0],
                ['question' => 'Тестирование', 'answer' => 'testWidgets(\'My Widget\n Test\', (WidgetTester tester)\n async {});', 'weight' => 0],
                ['question' => 'HTTP запрос', 'answer' => 'http.get(Uri.parse(\'https://\n example.com\'));', 'weight' => 0],
                ['question' => 'JSON сериализация', 'answer' => 'jsonEncode(myObject);', 'weight' => 0],
                ['question' => 'Локальное хранилище', 'answer' => 'SharedPreferences prefs =\n await SharedPreferences.getInstance();', 'weight' => 0],
                ['question' => 'Медиапроигрыватель', 'answer' => 'VideoPlayerController.network(\'https://\n example.com/video.mp4\');', 'weight' => 0],
                ['question' => 'Пакет', 'answer' => 'import \'package:provider/\n provider.dart\';', 'weight' => 0],
                ['question' => 'Библиотека', 'answer' => 'library\n my_library;', 'weight' => 0],
            ];
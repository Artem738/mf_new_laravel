<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class FlashcardsTableSeeder extends Seeder
{
    public function run()
    {
        DB::table('flashcards')->insert([
            [
                'deck_id' => 1,
                'question' => 'What is the powerhouse of the cell?',
                'answer' => 'Mitochondria',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 2,
                'question' => 'What is the chemical symbol for water?',
                'answer' => 'H2O',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 3,
                'question' => 'What is the atomic number of Carbon?',
                'answer' => '6',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Variable',
                'answer' => 'Переменная',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Function',
                'answer' => 'Функция',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Array',
                'answer' => 'Массив',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Class',
                'answer' => 'Класс',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Object',
                'answer' => 'Объект',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Inheritance',
                'answer' => 'Наследование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Encapsulation',
                'answer' => 'Инкапсуляция',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Polymorphism',
                'answer' => 'Полиморфизм',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Abstraction',
                'answer' => 'Абстракция',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Algorithm',
                'answer' => 'Алгоритм',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Data Structure',
                'answer' => 'Структура данных',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Database',
                'answer' => 'База данных',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Query',
                'answer' => 'Запрос',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Index',
                'answer' => 'Индекс',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Primary Key',
                'answer' => 'Первичный ключ',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Foreign Key',
                'answer' => 'Внешний ключ',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Constraint',
                'answer' => 'Ограничение',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Normalization',
                'answer' => 'Нормализация',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Denormalization',
                'answer' => 'Денормализация',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Join',
                'answer' => 'Соединение',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'View',
                'answer' => 'Представление',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Indexing',
                'answer' => 'Индексация',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Trigger',
                'answer' => 'Триггер',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Procedure',
                'answer' => 'Процедура',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Transaction',
                'answer' => 'Транзакция',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Commit',
                'answer' => 'Фиксация',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Rollback',
                'answer' => 'Откат',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Concurrency',
                'answer' => 'Конкуренция',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Locking',
                'answer' => 'Блокировка',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Deadlock',
                'answer' => 'Взаимная блокировка',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Design Pattern',
                'answer' => 'Шаблон проектирования',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Singleton Pattern',
                'answer' => 'Шаблон одиночка',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Factory Pattern',
                'answer' => 'Фабричный метод',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Observer Pattern',
                'answer' => 'Шаблон наблюдатель',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Decorator Pattern',
                'answer' => 'Шаблон декоратор',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Strategy Pattern',
                'answer' => 'Шаблон стратегия',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Repository Pattern',
                'answer' => 'Шаблон репозиторий',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Service Layer',
                'answer' => 'Сервисный слой',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Dependency Injection',
                'answer' => 'Внедрение зависимости',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Inversion of Control',
                'answer' => 'Инверсия управления',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Microservices',
                'answer' => 'Микросервисы',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Monolithic Architecture',
                'answer' => 'Монолитная архитектура',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Event-Driven Architecture',
                'answer' => 'Событийно-ориентированная архитектура',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Domain-Driven Design',
                'answer' => 'Предметно-ориентированное проектирование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'CQRS',
                'answer' => 'Командно-квотное разделение ответственности',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Event Sourcing',
                'answer' => 'Источник событий',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'SOLID Principles',
                'answer' => 'Принципы SOLID',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Single Responsibility Principle',
                'answer' => 'Принцип единственной ответственности',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Open/Closed Principle',
                'answer' => 'Принцип открытости/закрытости',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Liskov Substitution Principle',
                'answer' => 'Принцип подстановки Лисков',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Interface Segregation Principle',
                'answer' => 'Принцип разделения интерфейсов',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Dependency Inversion Principle',
                'answer' => 'Принцип инверсии зависимостей',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'RESTful API',
                'answer' => 'RESTful API',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'GraphQL',
                'answer' => 'GraphQL',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Middleware',
                'answer' => 'Промежуточное ПО',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Controller',
                'answer' => 'Контроллер',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Model',
                'answer' => 'Модель',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'View',
                'answer' => 'Представление',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'MVVM',
                'answer' => 'MVVM',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'MVC',
                'answer' => 'MVC',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'MVP',
                'answer' => 'MVP',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Data Binding',
                'answer' => 'Привязка данных',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Observer',
                'answer' => 'Наблюдатель',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Publisher-Subscriber',
                'answer' => 'Издатель-Подписчик',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Message Queue',
                'answer' => 'Очередь сообщений',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Asynchronous Programming',
                'answer' => 'Асинхронное программирование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Synchronous Programming',
                'answer' => 'Синхронное программирование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Event Loop',
                'answer' => 'Цикл событий',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Callback',
                'answer' => 'Обратный вызов',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Promise',
                'answer' => 'Обещание',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Thread',
                'answer' => 'Поток',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Process',
                'answer' => 'Процесс',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Concurrency',
                'answer' => 'Конкурентность',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Parallelism',
                'answer' => 'Параллелизм',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Scalability',
                'answer' => 'Масштабируемость',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Load Balancing',
                'answer' => 'Балансировка нагрузки',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Horizontal Scaling',
                'answer' => 'Горизонтальное масштабирование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Vertical Scaling',
                'answer' => 'Вертикальное масштабирование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Caching',
                'answer' => 'Кэширование',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Proxy',
                'answer' => 'Прокси',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Authentication',
                'answer' => 'Аутентификация',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],
            [
                'deck_id' => 4,
                'question' => 'Authorization',
                'answer' => 'Авторизация',
                'weight' => 0,
                'created_at' => now(),
                'updated_at' => now(),
            ],

        ]);
    }
}
